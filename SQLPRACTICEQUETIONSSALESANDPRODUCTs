-- Create Products table

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    unit_price DECIMAL(10, 2)
);

-- Insert sample data into Products table

INSERT INTO Products (product_id, product_name, category, unit_price) VALUES
(101, 'Laptop', 'ElectronicS', 500.00),
(102, 'Smartphone', 'Electronics', 300.00),
(103, 'Headphones', 'Electronics', 30.00),
(104, 'Keyboard', 'Electronics', 20.00),
(105, 'Mouse', 'Electronics', 15.00);

SELECT * FROM PRODUCTS
SELECT PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS
SELECT PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS
WHERE CATEGORY='ELECTRONICS';

SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCTS
WHERE UNIT_PRICE>100;
SELECT PRODUCT_NAME,AVG(UNIT_PRICE) AS AVERAGEUNITPRICE
FROM PRODUCTS
GROUP BY PRODUCT_NAME

--GROUP BY PRODUCT_NAME
--HAVING MAX(UNIT_PRICE);

SELECT PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS
WHERE UNIT_PRICE= (SELECT MAX(UNIT_PRICE) FROM PRODUCTS);


SELECT PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS
ORDER  BY UNIT_PRICE DESC
  
  
SELECT PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS
WHERE  UNIT_PRICE BETWEEN 20 AND 600

SELECT PRODUCT_NAME,CATEGORY FROM PRODUCTS
ORDER BY CATEGORY ASC;




CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    quantity_sold INT,
    sale_date DATE,
    total_price DECIMAL(10, 2)
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert sample data into Sales table

INSERT INTO Sales (sale_id, product_id, quantity_sold, sale_date, total_price) VALUES
(1, 101, 5, '2024-01-01', 2500.00),
(2, 102, 3, '2024-01-02', 900.00),
(3, 103, 2, '2024-01-02', 60.00),
(4, 104, 4, '2024-01-03', 80.00),
(5, 105, 6, '2024-01-03', 90.00);

SELECT * FROM SALES
SELECT SALE_ID,SALE_DATE FROM SALES

SELECT * FROM SALES WHERE TOTAL_PRICE>100
SELECT SALE_ID,TOTAL_PRICE FROM SALES
WHERE SALE_DATE='2024-01-03'


SELECT SUM(TOTAL_PRICE) AS TOTALREVENUE
FROM SALES

SELECT SUM(QUANTITY_SOLD) AS TOTALQUANTITY_SOLD
FROM SALES


SELECT SALE_ID,PRODUCT_ID,TOTAL_PRICE FROM SALES
WHERE QUANTITY_SOLD>4;

SELECT AVG(TOTAL_PRICE) AS AVERAGE_TOTAL_PRICE
FROM SALES


























